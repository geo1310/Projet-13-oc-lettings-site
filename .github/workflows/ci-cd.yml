name: CI/CD Pipeline

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:

  build:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ github.ref }}  # Retrieves the branch or commit reference

      - name: Set up Python 3.11.0
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.0

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run migrations
        run: poetry run python manage.py migrate

      - name: Collect static files
        run: poetry run python manage.py collectstatic --noinput

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=. --cov-report=html --cov-fail-under=80

      - name: Lint code
        run: poetry run flake8 .

      - name: Format code with Black
        run: poetry run black --check .

      - name: Archive test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: reports/test-results.xml

      - name: Archive coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov

  deploy-docker:
    runs-on: ubuntu-latest
    needs: build

    if: github.ref == 'refs/heads/main'

    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ github.ref }}

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get short SHA
        id: vars
        run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build, Tag, Push and Pull Docker images
        run: |
          SHORT_SHA=${{ env.SHA_SHORT }}
          SERVICES=$(docker-compose config --services)
          for SERVICE in $SERVICES; do
            IMAGE_NAME=$(docker-compose config | grep "image: " | grep "$SERVICE" | awk '{print $2}')
            docker-compose build $SERVICE
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$SHORT_SHA
            docker push $IMAGE_NAME:$SHORT_SHA
            docker pull $IMAGE_NAME:$SHORT_SHA
          done

  deploy-render:
    runs-on: ubuntu-latest
    needs: deploy-docker
    if: github.ref == 'refs/heads/main'
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ github.ref }}

      - name: Get short SHA
        id: vars
        run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Deploy to Render
        env:
          deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
          sha_short: ${{ env.SHA_SHORT }}
        run: |

          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${deploy_url}&ref=${sha_short}")
          if [ "${HTTP_STATUS}" -eq 200 ]; then
            echo "Deployment successful. Status: ${HTTP_STATUS}"
          else
            echo "Deployment failed. Status: ${HTTP_STATUS}"
            exit 1
          fi
